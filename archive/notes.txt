8/24/97Trail of breadcrumbs - UNICOM test installationTo start UNICOM:Power up and boot the node jonah.  The machine will automatically boot the default kernel.  The machine will go through it's booting process, then at the very end of the boot will start UNICOM.  The parallel port output defaults to all on during the boot, so all the devices controlled by the OPTO unit will be on during this time.  A message is echoed out to the console when UNICOM is started.  The UNIX machine is in multi-user mode, so UNICOM is started in the background.  UNICOM must still go through the 5 or 6 second start-up before it asserts the OPTO outputs.You can look to see if unicom started by logging into jonah and looking at the list of process (the ps or top commands) or by looking at the system log by doing a 'tail /var/log/syslog'.  The program runs out of the /unicom directory.If you want to kill the program, you have to find the process id and kill it from the unix command line.  If you want to remove the automatic starting of the code, edit the /etc/rc.d/rc.local file and comment out the line that starts UNICOM.The autostart of unicom re-directs the console or stdout output to the file /unicom/unicom.out.To see what UNICOM is doing:Assuming it started automatically, you can only view UNICOM console messages by looking at the /unicom/unicom.out file.  To do so log into jonah (either directly at the jonah console or by telnet from some other node).  Change directory to /unicom, and type 'tail -f unicom.out'.  This command prints the last 20 lines or so of the file unicom.out, and continuously refreshes.  You should see new lines come up as the program operates.  This is what would be going to the console.  It might be a bit delayed due to buffering and network traffic.cd /unicom; /unicom/unicom > unicom.out &If you started UNICOM from the command line, you cannot view the output from a remote node (right now) unless you redirect the output as above, or use the tee command like 'unicom | tee unicom.out'. To talk to UNICOM:Again, if UNICOM started automatically, you must use the unicom socket commander (called usc, in the /unicom directory) to send commands.  Usc runs either interactively or in command-line mode.  To run interactively, type 'usc <nodename><cr>'.  For example, type usc jonah<cr>.  The usc prompts you for standard UNICOM (ie MINICOM) commands, like d05 pl to play the laser disk.  to quit, type q<cr>.  To run usc in command-line mode type 'usc jonah d05 pl'.  The usc will issue the command and return promptly to the shell.  You can run usc from any node, including jonah.  Right now, since the code won't compile on the O2 machine, you must do so from jonah or hak.If you started UNICOM manually from the command line, then you may enter commands as normal from the console, or you can use usc.Differences between UNICOM and MINI/INTERCOM.Lots, internally.  Mostly in the access to the physical devices like serial and parallel ports.  Almost no differences to the user, except those listed below:CHANNEL.CFG:Devices and channels that talk to physical ports like serial and parallel ports must now have a UNIX device name in the CHANNEL.CFG file.  For instance, the MIDI is plugged into PC COM1, so the MIDI channel has to have a line that says 'UDEV cua0'.  The ports in use are:	cua0 = com1, for MIDI	cua3 = com4, for laser disk	lp1 = lpt1, for OPTOThe names ARE case sensitive.  Entries like for the interrupts and base addresses, etc are no longer meaningful.Operation:Use a control-X to quit the code, not a control Q, as control-Q has a special meaning in UNIX terminal drivers.Other CFG files:The other CFG files should be useable as is.  The only glitch is that DOS uses <cr><lf> as the end of line, so in unix these files all have an extra ^M at the end of line.  This does not seem to be a problem, but may effect some of the commands.  If problems are encountered, take the ^M's out of the files.