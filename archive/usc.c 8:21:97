/*************************************************************************	File USC.C		Ver 1.0, 8/20/97		R. Gritzo		This is the Unicom Socket Commander (USC).		Software Copyright 1997:	Russ Gritzo					Jericho Data Systems					77 Mesa Verde					Los Alamos, NM 87544	No part useable without author's consent.	This code takes a standard UNICOM (aka Intercom) console	command and ships it via a socket call to UNICOM running	on a remote note.  The command appears on the remote node	as if it had been typed at that node's console.		Compile:  gcc -o usc usc.c	Useage:   usc <node name> [<command>]	Where:	node name is the domain name (short name,		 must be resolvable to a FQDN or IP Address)		command is a normal UNICOM console command.		Calling with only the node name loops, prompting		for commands.  Q<enter> quits.	Example:  usc jonah d05 pl		sends a 'd05 pl' command to UNICOM on node jonah.		Version History:		Ver 1.0		8/20/97		Original Release				*************************************************************************/#include <sys/types.h>#include <sys/socket.h>#include <netinet/in.h>#include <arpa/inet.h>#include <netdb.h>#include <stdio.h>#include <string.h>#include <unistd.h>void main(int argc, char *argv[]){int sockfd;int len;struct sockaddr_in address;struct hostent *hostinfo;int result;char string[80];int i;int loop=0;if (argc <= 1)	{	printf("\nCalling format is: uniclientn <node> <command>\n");	exit();	}else if (argc == 2)	{	loop = 1;	printf("\nCommand to send to node %s:",argv[1]);	for (i=0; i<=79; i++)		{		string[i]=getchar();		if ((string[i] == 0x0d)||(string[i]==0x0a))			break;		}	string[i] = '\0';	if ((string[0] == 'q')||(string[0]=='Q'))		exit();	}else	{	string[0] = '\0';	for (i=2; i<=argc-1; i++)		{		strcat(string,argv[i]);		strcat(string," ");		}	//printf("\nsending node %s command %s",argv[1],string);	}while(1==1)	{	//make a socket for the client	sockfd = socket(AF_INET, SOCK_STREAM, 0);	//name the socket	address.sin_family = AF_INET;	hostinfo = gethostbyname(argv[1]);	if (!hostinfo)		{		perror("Unable to resolve IP for jonah");		exit();		}	address.sin_addr.s_addr = 		inet_addr(inet_ntoa(*(struct in_addr *) *(hostinfo -> h_addr_list)));	address.sin_port = htons(9734);	len = sizeof(address);	//now connect	result = connect(sockfd, (struct sockaddr *)&address, len);	if (result == -1)		{		perror("Client not able to connect\n");		exit();		}	printf("\nSending node %s command %s",argv[1],string);	fflush(stdout);	write(sockfd, string, strlen(string));	//give the server some time to respond	//sleep(1);	result = read(sockfd, string, 80);	if (result >= 1)	     {		string[result]='\0'; //cause read don't do it		printf("\nServer replied: %s",string);	     }	close(sockfd);	if (loop == 1)		{		printf("\nCommand to send to node %s:",argv[1]);		for (i=0; i<=79; i++)			{			string[i]=getchar();			if ((string[i] == 0x0d)||(string[i]==0x0a))				break;			}		string[i] = '\0';		if ((string[0] == 'q')||(string[0]=='Q'))			break;		}	else		break;	}printf("\n");fflush(stdout);}