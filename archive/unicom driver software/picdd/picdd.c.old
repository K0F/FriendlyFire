/*****************************************************************************

   File: PICDD.C              Version 1.1                 Date: 12/19/97   

      This is the device driver  for the PICservo system
      	Modified to use INET socket calls
	This is a SERVER

      Intended for use with the following:
      		unix (linux) machine with picservo on a /dev/cuax port
		

      The revision history is shown below:

            Rev 1.0    12/18/97  Initial version
            Rev 1.1    12/19/97  Changed kd in init to 30,000
            Rev 1.1.1  12/24/97  Changed retval = listen(server_sockfd, 16)
            Rev 1.1.2  12/28/97  added command end on :
 * 
      The following functions are in place, with the indicated
   last time of modification:
   
         ahtoi                         10/11/88
         itoah                         10/11/88
         trans                         12/19/97
         pic_com                       6/24/97

   calling format:
   	picdd [-d0 | -d1] <port_number> <serial_device> 

   outputs information to stdout, errors to stderr

!!!todo - 
	  change to non-blocking socket calls???
	  
*****************************************************************************/
/* defines */
#define VER "1.1.1, 12/24/97"
#define BAUD B19200	//fixed at 19200 Baud
#define _POSIX_SOURCE 1	//POSIX compliant code

/* includes */
#include <termios.h>	// for serial port params
#include <stdio.h>
#include <fcntl.h>	// for file open functions
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>

/* external variables */
struct pic_vals
	{
	unsigned addr;
	unsigned enable;
	unsigned kp;
	unsigned kd;
	unsigned ki;
	unsigned il;
	unsigned cl;
	unsigned ol;
	unsigned el;
	unsigned sr;
	long pos;
	long vel;
	long accel;
	unsigned pwmvel;
	char pwmdir[10];
	};
struct pic_vals pic[16];	//support upto 16 addresses
struct pic_status
	{
	long pos;
	unsigned char ad;
	unsigned int vel;
	unsigned char sb;	/* status byte */
	unsigned char asb;	/* aux status byte */
	long homepos;
	unsigned int ver;
	};
struct pic_status stat;	/* status - will make array */
int pic_error;        /* picservo I/O subsytem's error flag */
int pic_status1;        /* picservo data location, first value */
int pic_status2;        /* picservo data location, second value */
int pic_statl;        /* picservo length of status return */
char pic_longstat[50];	/* picservo long status return string */
int picbase;
int debug = 0;

char command[80];
char response[80];
char string[80];
char lastcmd[20];

/* prototypes */
void pic_com(int sfd, char message[]);
int trans(char message[]);
int ahtoi(char val);
char itoah(int ival);


int main(int argc, char *argv[])
{
int offset;
/* serial IO variables */
int fd;
int running = 1;	// control while
struct termios oldsio, newsio;
int i, j;
/* now the socket stuff */
int port;
int linger = 0;
int retval;
int server_sockfd, client_sockfd;
int server_len, client_len;
struct sockaddr_in server_address;
struct sockaddr_in client_address;
char string2[20];

/* external variables */
extern int pic_error;        /* pic I/O subsytem's error flag */
extern int pic_status1;        /* picservo data location, first value */
extern int pic_status2;        /* picservo data location, second value */
extern int pic_statl;        /* picservo length of status return */
extern struct pic_status stat;	/* status - will make array */
extern char pic_longstat[];	/* picservo long status return string */

/* first print the startup message */
fprintf(stdout,
 "\n Starting up the pic device driver, version %s, id=%ld...\n",VER,getpid());
if (argc < 3)
	{
	fprintf(stdout,
	 "\nCalling format is: picdd [-d(0|1)] <port_number> <serial_device>");
	fprintf(stdout,"\n\tNote: serial device name does not include path");
	fprintf(stdout,"\n\t      port number is TCP/IP port");
	fprintf(stdout,"\n\t-d0 no debug (default), -d1 is debug mode\n\n");
	exit(0);
	}

/* now figure out the arguments */
if (argv[1][0] == '-')
	offset = 1;
if (argc == 4)
	if ( (argv[offset][1] == 'd') && (argv[offset][2] == '1') )
		{
		debug = 1;
		fprintf(stdout,"Debugging on, ");
		}
		
/* now open the serial device */
sprintf(string,"/dev/%s",argv[2+offset]);
fprintf(stdout,"Opening serial device %s, ",string);
sscanf(argv[1+offset],"%d",&port);
fprintf(stdout,"Using TCP/IP port %d \n",port);
fd = open(string, O_RDWR | O_NOCTTY);
if (fd < 0)
	{
	perror(string);
	exit(-1);
	}
/* now get the old config and make a new one */
tcgetattr(fd, &oldsio); /* save the old attrs */
newsio.c_iflag = IGNPAR;
newsio.c_oflag = 0;
newsio.c_cflag = CS8 | CREAD | CLOCAL;
newsio.c_lflag = 0;	//non-canonical input
newsio.c_cc[VMIN] = 0;		//do not block waiting for 1st char 
newsio.c_cc[VTIME] = 5;	//wait up to 1/2 second
cfsetospeed(&newsio, BAUD);
cfsetispeed(&newsio, BAUD);
tcsetattr(fd, TCSANOW, &newsio);

unlink("server_socket");
/* now open the sockets */
server_sockfd = socket(AF_INET, SOCK_STREAM,0);
/* name the socket */
server_address.sin_family = AF_INET;
server_address.sin_addr.s_addr = htonl(INADDR_ANY);
server_address.sin_port = htons(port);
server_len = sizeof(server_address);
retval = bind(server_sockfd, (struct sockaddr *)&server_address, server_len);
retval = listen(server_sockfd, 16);

if ( retval  == -1)
	{
	perror("\nError listening to socket\n ");
	exit(-2);
	}
	
/* now at this point we have the sio open, and the socket started */
/* enter the main processing loop */
while (running)
	{
	/* now look for a command message */
	/* NOTE: this command blocks  until client connects */
	if (!linger)
	client_sockfd = accept(server_sockfd, 
		(struct sockaddr *)&client_address, &client_len);
	if (client_sockfd  == -1)
		{
		perror("\nError accepting connection\n");
		exit(-3); // ??? break instead and close queues
		}
	/* if here, then we must look for a message */
	for (i=0; i<79; i++)
		{
		retval = read(client_sockfd, &string[i], 1);
		if (retval < 0)
			{
			printf("\nError %d receiving message\n",retval);
			exit(-3);
			}
		if ((string[i] == '\0')||(retval == 0)||(string[i]==0x0d)
		    ||(string[i] == ':'))
			break;
		}
	string[i] = '\0';
	if (debug)
		fprintf(stdout,"\nReceived %d byte command:%s",
			strlen(string), string);
	sscanf(string,"%s",string2);			
	if (strcmp(string2,"linger") == 0)
		{
		linger = 1;
		if (debug) 
			fprintf(stdout,"\nSetting persistent connection");
		}
	else if (strcmp(string2,"close") == 0)
		{
		linger = 0;
		if (debug)
			fprintf(stdout,"\nClearing persistent connection");
		}
	else
	{
	//first convert the command
	retval = trans(string);
	// now output it
	if (retval >= 0)
		{
		pic_com(fd,command);
		/* presumably now we have the response */
		if (pic_error != 0)
			{
			fprintf(stderr,"\nPICservo error %d \n",pic_error);
			}
		sprintf(response, "%d %02x %02x: %s\n",
			pic_error, (unsigned)pic_status1, (unsigned)pic_status2, 
			pic_longstat);
		if (debug)
			fprintf(stdout,"\nsending response:%s\n",response);
		if (write(client_sockfd, response, strlen(response)+1) <= 0)
			{
			perror("\nError sending message\n");
			exit(-4);
			}
		}
	else
		{
		sprintf(response, "%d %02x %02x: Error - bad command\n",-24000, 0, 0);
		if (write(client_sockfd, response, strlen(response)+1) <= 0)
			{
			perror("\nError sending message\n");
			exit(-4);
			}
		}
	}
	if (!linger)
		close(client_sockfd);
	}	//end of while running

//cleanup
fprintf(stdout,"\n");
exit (0);

}	//end of main
/*******************************Functionsville******************************/
/***************************************************************/
/*    trans(char message[])                                    */
/*    translates the command message to the picservo subsystem.*/
/*    assumes the command is in the form <command> <addr> <...>*/
/* 12/19/97 - changed kd to 30000 in init                      */
/***************************************************************/
/* translate the command */
int trans(char message[])
{
extern char command[];
extern char lastcmd[];
extern int picbase;
char cmd[20];
unsigned addr;
int retval;
int i;
int num;
long int ltemp;
int temp, temp2;
char ctemp;

retval = 0;	//0 means no command to run, 1 = do run
printf("\n");
for (i=0; i<80; i++)
     {
     if (message[i] == '\0')
	  break;
     printf("%x ",message[i]);
     }
num = sscanf(message, "%s %d",cmd,&addr);
if (num < 2)
	{
	printf("\nerror: %s must have at least two fields, has %d\n",
	       message,num);
	return(-1);
	}
for (i=0; i<16; i++)
	if (pic[i].addr == addr)
		break;
if ((i>=16)&&(picbase < 16))
	{
	i = picbase++;
	pic[i].addr = addr;
	}
else if (picbase>=16)
	{
	printf("\nerror: used up all storage locations\n");
	exit(-1);
	}
//at this point i is the offset into the info structure
//copy the command to the structure 
strcpy(lastcmd, cmd);	
if (strcmp(cmd,"nop") == 0)
	{
	sprintf(command,"%02x 0e;",addr);
	retval = 1;
	}
else if (strcmp(cmd,"reset") == 0)
	{
	sprintf(command,"%02x 0f;",addr);
	retval = 1;
	}
else if (strcmp(cmd,"sleep") == 0)
	{
	sleep( (unsigned int)addr);
	retval = 0;
	}
else if (strcmp(cmd,"csb") == 0)
	{
	sprintf(command,"%02x 0b;",addr);
	retval = 1;
	}
else if (strcmp(cmd,"off") == 0)
	{
	sprintf(command,"%02x 17 02;",addr);
	retval = 1;
	}
else if (strcmp(cmd,"rpos") == 0)
	{
	sprintf(command,"%02x 00;",addr);
	retval = 1;
	}
else if (strcmp(cmd,"init") == 0)
	{
	pic[i].kp = 1000;
	pic[i].kd = 30000;
	pic[i].ki = 1000;
	pic[i].il = 100000;
	pic[i].ol = 255;
	pic[i].cl = 0;
	pic[i].el = 512;
	pic[i].sr = 1;
	sprintf(command,"%02x d6 %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x;",
		addr,(0xff&pic[i].kp),(0xff00&pic[i].kp)>>8,(0xff&pic[i].kd),(0xff00&pic[i].kd)>>8,
		(0xff&pic[i].ki),(0xff00&pic[i].ki)>>8,(0xff&pic[i].il),(0xff00&pic[i].il)>>8,
		pic[i].ol,pic[i].cl,(0xff&pic[i].el),(0xff00&pic[i].el)>>8,pic[i].sr);
	retval = 1;
	}
else if (strcmp(cmd,"gain") == 0)
	{
	sprintf(command,"%02x d6 %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x;",
		addr,(0xff&pic[i].kp),(0xff00&pic[i].kp)>>8,(0xff&pic[i].kd),(0xff00&pic[i].kd)>>8,
		(0xff&pic[i].ki),(0xff00&pic[i].ki)>>8,(0xff&pic[i].il),(0xff00&pic[i].il)>>8,
		pic[i].ol,pic[i].cl,(0xff&pic[i].el),(0xff00&pic[i].el)>>8,pic[i].sr);
	retval = 1;
	}
else if (strcmp(cmd,"vmode") == 0)
	{
	sscanf(message, "%s %d %s",cmd,&addr,&pic[i].pwmdir);
	if (strcmp(pic[i].pwmdir,"rev") == 0)
		sprintf(command,"%02x 94 f6 %02x %02x %02x %02x %02x %02x %02x %02x;",
			addr,(0xff&pic[i].vel),(0xff00&pic[i].vel)>>8,(0xff0000&pic[i].vel)>>16,
			(0xff000000&pic[i].vel)>>24,(0xff&pic[i].accel),(0xff00&pic[i].accel)>>8,
			(0xff0000&pic[i].accel)>>16,(0xff000000&pic[i].accel)>>24);
	else 
		sprintf(command,"%02x 94 b6 %02x %02x %02x %02x %02x %02x %02x %02x;",
			addr,(0xff&pic[i].vel),(0xff00&pic[i].vel)>>8,(0xff0000&pic[i].vel)>>16,
			(0xff000000&pic[i].vel)>>24,(0xff&pic[i].accel),(0xff00&pic[i].accel)>>8,
			(0xff0000&pic[i].accel)>>16,(0xff000000&pic[i].accel)>>24);
	retval = 1;
	}
else if (strcmp(cmd,"enable") == 0)
	{
	pic[i].enable = 1;
	sprintf(command,"%02x 17 %02x;",addr,0x05);
	retval = 1;
	}
else if (strcmp(cmd,"addr") == 0)
	{
	sscanf(message, "%s %d %d %d",cmd,&addr,&temp,&temp2);
	sprintf(command,"%02x 21 %02x %02x;",addr,temp, temp2);
	retval = 1;
	}
else if (strcmp(cmd,"traj") == 0)
	{
	sprintf(command,"%02x e4 1f %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x 00;",
		addr,(0xff&pic[i].pos),(0xff00&pic[i].pos)>>8,(0xff0000&pic[i].pos)>>16,(0xff000000&pic[i].pos)>>24,
		(0xff&pic[i].vel),(0xff00&pic[i].vel)>>8,(0xff0000&pic[i].vel)>>16,(0xff000000&pic[i].vel)>>24,
		(0xff&pic[i].accel),(0xff00&pic[i].accel)>>8,(0xff0000&pic[i].accel)>>16,(0xff000000&pic[i].accel)>>24);
	retval = 1;
	}
else if (strcmp(cmd,"gtraj") == 0)
	{
	sprintf(command,"%02x e4 9f %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x %02x 00;",
		addr,(0xff&pic[i].pos),(0xff00&pic[i].pos)>>8,(0xff0000&pic[i].pos)>>16,(0xff000000&pic[i].pos)>>24,
		(0xff&pic[i].vel),(0xff00&pic[i].vel)>>8,(0xff0000&pic[i].vel)>>16,(0xff000000&pic[i].vel)>>24,
		(0xff&pic[i].accel),(0xff00&pic[i].accel)>>8,(0xff0000&pic[i].accel)>>16,(0xff000000&pic[i].accel)>>24);
	retval = 1;
	}
else if (strcmp(cmd,"go") == 0)
	{
	sprintf(command,"%02x 05;",addr);
	retval = 1;
	}
else if (strcmp(cmd,"stop") == 0)
	{
	pic[i].enable = 1;
	sprintf(command,"%02x 17 %02x;",addr,0x05);
	retval = 1;
	}
else if (strcmp(cmd,"stat") == 0)
	{
	sprintf(command,"%02x 13 ff;",addr);
	retval = 1;
	}
else if (strcmp(cmd,"pwm") == 0)
	{
	sscanf(message, "%s %d %s %d",cmd,&addr,&pic[i].pwmdir,&pic[i].pwmvel);
	if (strcmp(pic[i].pwmdir,"rev") == 0)
		sprintf(string,"%02x 24 c8 %02x;",addr,pic[i].pwmvel);
	else 
		sprintf(string,"%02x 24 88 %02x;",addr,pic[i].pwmvel);
	retval = 1;
	}
else if (strcmp(cmd,"vel") == 0)
	{
	num = sscanf(message, "%s %d %ld",cmd,&addr,&ltemp);
	pic[i].vel = ltemp;
	printf("\n setting velocity for motor %d (%d) to %ld",
		pic[i].addr, i, pic[i].vel);
	retval = 0;
	}
else if (strcmp(cmd,"pos") == 0)
	{
	num = sscanf(message, "%s %d %ld",cmd,&addr,&ltemp);
	pic[i].pos = ltemp;
	printf("\n setting position for motor %d (%d) to %ld",
		pic[i].addr, i, pic[i].pos);
	retval = 0;
	}
else if (strcmp(cmd,"accel") == 0)
	{
	sscanf(message, "%s %d %ld",cmd,&addr,&ltemp);
	pic[i].accel = ltemp;
	printf("\n setting accelleration for motor %d (%d) to %ld",
		pic[i].addr, i, pic[i].accel);
	retval = 0;
	}
else if (strcmp(cmd,"kp") == 0)
	{
	num = sscanf(message, "%s %d %d",cmd,&addr,&temp);
	pic[i].kp = temp;
	printf("\n setting kp for motor %d (%d) to %d",
		pic[i].addr, i, pic[i].kp);
	retval = 0;
	}
else if (strcmp(cmd,"kd") == 0)
	{
	num = sscanf(message, "%s %d %d",cmd,&addr,&temp);
	pic[i].kd = temp;
	printf("\n setting kd for motor %d (%d) to %d",
		pic[i].addr, i, pic[i].kd);
	retval = 0;
	}
else if (strcmp(cmd,"ki") == 0)
	{
	num = sscanf(message, "%s %d %d",cmd,&addr,&temp);
	pic[i].ki = temp;
	printf("\n setting ki for motor %d (%d) to %d",
		pic[i].addr, i, pic[i].ki);
	retval = 0;
	}
return retval;
}

/***************************************************************/
/*    pic_com(message)                                         */
/*    outputs a message to the picservo subsystem.             */
/*          Uses read and write to open device sfd             */
/***************************************************************/
void pic_com(int sfd, char message[])
{
int i = 0;
int endi;
int ret_val = 0;
int error_val = 0;
int j = 0;
unsigned sum = 0;
int check_sum;
unsigned char out_array[23];
unsigned char in_array[50];
char c;
extern struct pic_status stat;	/* status - will make array */
extern int pic_error;        /* pic I/O subsytem's error flag */
extern int pic_status1;        /* picservo data location, first value */
extern int pic_status2;        /* picservo data location, second value */
extern int pic_statl;        /* picservo length of status return */
extern char pic_longstat[];	/* picservo long status return string */


//printf("\n\tEntering pic comm routine with %s",message);
/* set the error flag and status to 0 each time the routine is called */
pic_error = 0;
pic_status1 = 0;
pic_status2 = 0;
pic_statl = 0;
pic_longstat[0]='\0';

/* first set up the out_array */
out_array[i++] = 0xaa;  /* start of command char */

/* next put in the message string, ignoring blank char's and nl and lf*/
while ((message[j] != '\0') && (i < 19) && (j < 50) && (message[j] != ';'))
   {
   if ( (message[j] != 0x20) 
	&& (message[j] != 0x0d) 
	&& (message[j] != ',') 
	&& (message[j] != 0x0a) )
      {                       /* if the char is not a space */
      out_array[i] = ahtoi(message[j])<<4 | ahtoi(message[j+1]);
      sum += out_array[i];
	i++; j+=2;
      }
   /* if char is a space, ignore it */
   j++;
   }
if ((j >= 50) || (i >= 19))
   {
   pic_error = -24020;    /* an improper message string */
   return;                 /* terminate */
   }

/* next add the checksum */
out_array[i] = sum & 0xff;

if (debug)
	{
	printf("\n\tConverted message has %d bytes",i+1);
	for (j=0; j<=i; j++)
		printf("\n\tchar %x (%d)",out_array[j],out_array[j]);
	}

/* next, nuke out any unclaimed char's in the buffer */
tcflush(sfd,TCIFLUSH);

/* now output the string */

//printf("\n\tcalling write with i=%d",i);
ret_val = write(sfd, out_array, i+1); //last char is in array[i]
if (ret_val < 0)
   error_val = -24200 + ret_val;

/* now wait for some type of silly response */
//printf("\n\twaiting for response");
for (i=0; i<20; i++)    /* get as many as 20 char's */
   {
   ret_val = read(sfd, &c, 1);	// get 1 char 
   if (ret_val == 0)
      {
      pic_error = -24023; /* timeout error */
      break;
      }
   if (ret_val < 0)           /* is it an error? */
      {
      error_val = -(24300 + ret_val);
      break;
      }
   else                       /* if not it must be a char */
      in_array[i] = c;
   /* if not, keep going */
   }
/* we end up here once we have the whole array */
endi = i;      /* number of bytes read */
if (debug)
printf("\nRead back %d bytes ",i);
/* first process the error */
if ( (pic_error <= -24300) || ((pic_error == -24023) && (endi == 0)) )
	{
	pic_status1 = in_array[0];
	pic_status2 = 0;
	pic_statl = 0;
	return;
	}
	
/* now figure out what the heck all this means */
pic_error = 0;	/* clear the error  so we gots not timeout */
if (endi == 2)	/* received two bytes */
	{
	/* check the checksum */
	pic_status1 = in_array[0];
	pic_status2 = in_array[1];
	pic_statl = endi;
	if (in_array[0] == in_array[1])
		pic_error = 0;	/* then the checksum is ok */
	else
		pic_error = -24022;
	}
else
	{
	/* assume it is the upto 14 byte return */
	pic_status1 = in_array[0];
	pic_status2 = in_array[endi-1];	/* get the checksum */
	pic_statl = endi;
	j = 0;
	sum = 0;
	for (i=0; i<endi; i++)
		{
		if (i != (endi-1))
			sum += (unsigned)in_array[i];
		pic_longstat[j++] = itoah((in_array[i]&0xf0)>>4);
		pic_longstat[j++] = itoah(in_array[i]&0x0f);
		pic_longstat[j++] = ' ';
		}
	if ( (sum&0xff) != (unsigned)in_array[endi-1])
		pic_error = -24022;
	//printf("\n\tcalculated checkum is %x",sum);
	pic_longstat[j] = '\0';
	}
return;	
}

/***************************************************************/
/*    itoah(ival)                                              */
/*    converts an integer to a single ascii hex character      */
/***************************************************************/
char itoah(ival)
int ival;
{

if ((ival >= 0x0) && (ival <= 0x9))
   return (char)(ival + 0x30);
if ((ival >= 0xa) && (ival <= 0xf))
   return (char)(ival + 0x37);
if (ival > 0xf)
   return '!';
}

/***************************************************************/
/*    ahtoi(val)                                               */
/*    converts a single ascii hex character to integer         */
/***************************************************************/
int ahtoi(val)
char val;
{
int ival;

if ((val >= '0') && (val <= '9'))
   return (val - 0x30);
if ((val >= 'a') && (val <= 'f'))
   return (val - 0x57);
if ((val >= 'A') && (val <= 'F'))
   return (val - 0x37);
}


/************************************************************/
/* Thats it !                                               */
/************************************************************/

